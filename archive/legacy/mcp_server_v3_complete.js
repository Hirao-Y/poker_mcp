      "pokerinput.proposeZone", "pokerinput.updateZone", "pokerinput.deleteZone",
      "pokerinput.proposeTransform", "pokerinput.updateTransform", "pokerinput.deleteTransform",
      "pokerinput.proposeBuildupFactor", "pokerinput.updateBuildupFactor", "pokerinput.deleteBuildupFactor",
      "pokerinput.changeOrderBuildupFactor", "pokerinput.proposeSource", "pokerinput.applyChanges"
    ]
  });
});

// JSON-RPC сѓесЃ│сЃЅсЃЮсѓцсЃ│сЃѕ
app.post('/mcp', (req, res) => {
  try {
    const jsonBody = req.body;
    
    if (!jsonBody.method) {
      return res.json(jsonRpcError(jsonBody.id, -32600, 'уёАті╣сЂфсЃфсѓ»сѓесѓ╣сЃѕ: methodсЂїт┐ЁУдЂсЂДсЂЎ'));
    }

    console.log('MCPУдЂТ▒ѓтЈЌС┐А:', { method: jsonBody.method, id: jsonBody.id });

    switch (jsonBody.method) {
      case 'pokerinput.proposeBody':
        try {
          const { name, type, ...options } = jsonBody.params;
          if (!name || !type) {
            return res.json(jsonRpcError(jsonBody.id, -32602, 'уёАті╣сЂфсЃЉсЃЕсЃАсЃ╝сѓ┐: nameсЂеtypeсЂ»т┐ЁжаѕсЂДсЂЎ'));
          }
          const result = manager.proposeBody(name, type, options);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `уФІСйЊТЈљТАѕсѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.updateBody':
        try {
          const { name, ...updates } = jsonBody.params;
          if (!name) {
            return res.json(jsonRpcError(jsonBody.id, -32602, 'уёАті╣сЂфсЃЉсЃЕсЃАсЃ╝сѓ┐: nameсЂ»т┐ЁжаѕсЂДсЂЎ'));
          }
          const result = manager.updateBody(name, updates);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `уФІСйЊТЏ┤Тќ░сѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.deleteBody':
        try {
          const { name } = jsonBody.params;
          if (!name) {
            return res.json(jsonRpcError(jsonBody.id, -32602, 'уёАті╣сЂфсЃЉсЃЕсЃАсЃ╝сѓ┐: nameсЂ»т┐ЁжаѕсЂДсЂЎ'));
          }
          const result = manager.deleteBody(name);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `уФІСйЊтЅіжЎцсѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.proposeZone':
        try {
          const { body_name, material, density } = jsonBody.params;
          if (!body_name || !material) {
            return res.json(jsonRpcError(jsonBody.id, -32602, 'уёАті╣сЂфсЃЉсЃЕсЃАсЃ╝сѓ┐: body_nameсЂеmaterialсЂ»т┐ЁжаѕсЂДсЂЎ'));
          }
          const result = manager.proposeZone(body_name, material, density);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `сѓЙсЃ╝сЃ│ТЈљТАѕсѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.updateZone':
        try {
          const { body_name, ...updates } = jsonBody.params;
          if (!body_name) {
            return res.json(jsonRpcError(jsonBody.id, -32602, 'уёАті╣сЂфсЃЉсЃЕсЃАсЃ╝сѓ┐: body_nameсЂ»т┐ЁжаѕсЂДсЂЎ'));
          }
          const result = manager.updateZone(body_name, updates);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `сѓЙсЃ╝сЃ│ТЏ┤Тќ░сѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.deleteZone':
        try {
          const { body_name } = jsonBody.params;
          if (!body_name) {
            return res.json(jsonRpcError(jsonBody.id, -32602, 'уёАті╣сЂфсЃЉсЃЕсЃАсЃ╝сѓ┐: body_nameсЂ»т┐ЁжаѕсЂДсЂЎ'));
          }
          const result = manager.deleteZone(body_name);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `сѓЙсЃ╝сЃ│тЅіжЎцсѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.proposeTransform':
        try {
          const { name, operation } = jsonBody.params;
          if (!name || !operation) {
            return res.json(jsonRpcError(jsonBody.id, -32602, 'уёАті╣сЂфсЃЉсЃЕсЃАсЃ╝сѓ┐: nameсЂеoperationсЂ»т┐ЁжаѕсЂДсЂЎ'));
          }
          const result = manager.proposeTransform(name, operation);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `тцЅТЈЏТЈљТАѕсѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.updateTransform':
        try {
          const { name, ...updates } = jsonBody.params;
          if (!name) {
            return res.json(jsonRpcError(jsonBody.id, -32602, 'уёАті╣сЂфсЃЉсЃЕсЃАсЃ╝сѓ┐: nameсЂ»т┐ЁжаѕсЂДсЂЎ'));
          }
          const result = manager.updateTransform(name, updates);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `тцЅТЈЏТЏ┤Тќ░сѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.deleteTransform':
        try {
          const { name } = jsonBody.params;
          if (!name) {
            return res.json(jsonRpcError(jsonBody.id, -32602, 'уёАті╣сЂфсЃЉсЃЕсЃАсЃ╝сѓ┐: nameсЂ»т┐ЁжаѕсЂДсЂЎ'));
          }
          const result = manager.deleteTransform(name);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `тцЅТЈЏтЅіжЎцсѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.proposeBuildupFactor':
        try {
          const { material, use_slant_correction, use_finite_medium_correction } = jsonBody.params;
          if (!material) {
            return res.json(jsonRpcError(jsonBody.id, -32602, 'уёАті╣сЂфсЃЉсЃЕсЃАсЃ╝сѓ┐: materialсЂ»т┐ЁжаѕсЂДсЂЎ'));
          }
          const result = manager.proposeBuildupFactor(material, use_slant_correction, use_finite_medium_correction);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `сЃЊсЃФсЃЅсѓбсЃЃсЃЌС┐ѓТЋ░ТЈљТАѕсѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.updateBuildupFactor':
        try {
          const { material, ...updates } = jsonBody.params;
          if (!material) {
            return res.json(jsonRpcError(jsonBody.id, -32602, 'уёАті╣сЂфсЃЉсЃЕсЃАсЃ╝сѓ┐: materialсЂ»т┐ЁжаѕсЂДсЂЎ'));
          }
          const result = manager.updateBuildupFactor(material, updates);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `сЃЊсЃФсЃЅсѓбсЃЃсЃЌС┐ѓТЋ░ТЏ┤Тќ░сѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.deleteBuildupFactor':
        try {
          const { material } = jsonBody.params;
          if (!material) {
            return res.json(jsonRpcError(jsonBody.id, -32602, 'уёАті╣сЂфсЃЉсЃЕсЃАсЃ╝сѓ┐: materialсЂ»т┐ЁжаѕсЂДсЂЎ'));
          }
          const result = manager.deleteBuildupFactor(material);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `сЃЊсЃФсЃЅсѓбсЃЃсЃЌС┐ѓТЋ░тЅіжЎцсѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.changeOrderBuildupFactor':
        try {
          const { material, newIndex } = jsonBody.params;
          if (!material) {
            return res.json(jsonRpcError(jsonBody.id, -32602, 'уёАті╣сЂфсЃЉсЃЕсЃАсЃ╝сѓ┐: materialсЂ»т┐ЁжаѕсЂДсЂЎ'));
          }
          const result = manager.changeOrderBuildupFactor(material, newIndex);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `сЃЊсЃФсЃЅсѓбсЃЃсЃЌС┐ѓТЋ░жаєт║ЈтцЅТЏ┤сѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.proposeSource':
        try {
          const result = manager.proposeSource(jsonBody.params);
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `уиџТ║љТЈљТАѕсѓесЃЕсЃ╝: ${error.message}`));
        }

      case 'pokerinput.applyChanges':
        try {
          const result = manager.applyChanges();
          return res.json(jsonRpcSuccess(jsonBody.id, { result }));
        } catch (error) {
          return res.json(jsonRpcError(jsonBody.id, -32000, `тцЅТЏ┤жЂЕућесѓесЃЕсЃ╝: ${error.message}`));
        }

      default:
        return res.json(jsonRpcError(jsonBody.id, -32601, `ТюфуЪЦсЂ«сЃАсѓйсЃЃсЃЅ: ${jsonBody.method}`));
    }
  } catch (error) {
    console.error('С║ѕТюЪсЂЌсЂфсЂёсѓесЃЕсЃ╝:', error.message, error.stack);
    return res.json(jsonRpcError(req.body?.id, -32603, 'сѓхсЃ╝сЃљсЃ╝тєЁжЃесѓесЃЕсЃ╝'));
  }
});

// сЃўсЃФсѓ╣сЃЂсѓДсЃЃсѓ»сѓесЃ│сЃЅсЃЮсѓцсЃ│сЃѕ
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    version: '3.0.0',
    pendingChanges: manager.pendingChanges.length
  });
});

// сѓхсЃ╝сЃљсЃ╝УхитІЋ
app.listen(PORT, () => {
  console.log(`­Ъџђ Complete MCP Server v3.0 сЂїУхитІЋсЂЌсЂЙсЂЌсЂЪ`);
  console.log(`­ЪЊА URL: http://localhost:${PORT}`);
  console.log(`­ЪЊІ тѕЕућетЈ»УЃйсЂфсѓесЃ│сЃЅсЃЮсѓцсЃ│сЃѕ:`);
  console.log(`   - JSON-RPC: POST /mcp`);
  console.log(`   - ТЃЁта▒тЈќтЙЌ: GET /`);
  console.log(`   - сЃўсЃФсѓ╣сЃЂсѓДсЃЃсѓ»: GET /health`);
  console.log(`Рюе тЁе15сЂ«MCPсЃАсѓйсЃЃсЃЅсЂїтѕЕућетЈ»УЃйсЂДсЂЎ`);
  console.log(`­ЪЊЂ сЃЄсЃ╝сѓ┐сЃЋсѓАсѓцсЃФ: ${manager.yamlFile}`);
  console.log(`­Ъћё С┐ЮуЋЎтцЅТЏ┤: ${manager.pendingChanges.length}С╗Х`);
});

// сЃЌсЃГсѓ╗сѓ╣ухѓС║єТЎѓсЂ«сѓ»сЃфсЃ╝сЃ│сѓбсЃЃсЃЌ
process.on('SIGINT', () => {
  console.log('\nРЈ╣№ИЈ  сѓхсЃ╝сЃљсЃ╝сѓњтЂюТГбсЂЌсЂдсЂёсЂЙсЂЎ...');
  process.exit(0);
});

process.on('uncaughtException', (error) => {
  console.error('ТюфТЇЋТЇЅСЙІтцќ:', error.message, error.stack);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('ТюфтЄдуљєсЂ«PromiseТІњтљд:', reason, promise);
});
